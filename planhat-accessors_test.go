// Copyright 2021 The go-planhat AUTHORS. All rights reserved.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.
// Code generated by gen-accessors; DO NOT EDIT.
package planhat

import (
	"testing"
	"time"
)

func TestCompany_GetCSMScore(tt *testing.T) {
	var zeroValue int
	c := &Company{CSMScore: &zeroValue}
	c.GetCSMScore()
	c = &Company{}
	c.GetCSMScore()
	c = nil
	c.GetCSMScore()
}

func TestCompany_GetCustomerFrom(tt *testing.T) {
	var zeroValue time.Time
	c := &Company{CustomerFrom: &zeroValue}
	c.GetCustomerFrom()
	c = &Company{}
	c.GetCustomerFrom()
	c = nil
	c.GetCustomerFrom()
}

func TestCompany_GetCustomerTo(tt *testing.T) {
	var zeroValue time.Time
	c := &Company{CustomerTo: &zeroValue}
	c.GetCustomerTo()
	c = &Company{}
	c.GetCustomerTo()
	c = nil
	c.GetCustomerTo()
}

func TestCompany_GetExternalID(tt *testing.T) {
	var zeroValue string
	c := &Company{ExternalID: &zeroValue}
	c.GetExternalID()
	c = &Company{}
	c.GetExternalID()
	c = nil
	c.GetExternalID()
}

func TestCompany_GetH(tt *testing.T) {
	var zeroValue int
	c := &Company{H: &zeroValue}
	c.GetH()
	c = &Company{}
	c.GetH()
	c = nil
	c.GetH()
}

func TestCompany_GetID(tt *testing.T) {
	var zeroValue string
	c := &Company{ID: &zeroValue}
	c.GetID()
	c = &Company{}
	c.GetID()
	c = nil
	c.GetID()
}

func TestCompany_GetLastRenewal(tt *testing.T) {
	var zeroValue time.Time
	c := &Company{LastRenewal: &zeroValue}
	c.GetLastRenewal()
	c = &Company{}
	c.GetLastRenewal()
	c = nil
	c.GetLastRenewal()
}

func TestCompany_GetLicenses(tt *testing.T) {
	var zeroValue []License
	c := &Company{Licenses: &zeroValue}
	c.GetLicenses()
	c = &Company{}
	c.GetLicenses()
	c = nil
	c.GetLicenses()
}

func TestCompany_GetMR(tt *testing.T) {
	c := &Company{}
	c.GetMR()
	c = nil
	c.GetMR()
}

func TestCompany_GetMRR(tt *testing.T) {
	c := &Company{}
	c.GetMRR()
	c = nil
	c.GetMRR()
}

func TestCompany_GetMRRTotal(tt *testing.T) {
	c := &Company{}
	c.GetMRRTotal()
	c = nil
	c.GetMRRTotal()
}

func TestCompany_GetMRTotal(tt *testing.T) {
	c := &Company{}
	c.GetMRTotal()
	c = nil
	c.GetMRTotal()
}

func TestCompany_GetName(tt *testing.T) {
	var zeroValue string
	c := &Company{Name: &zeroValue}
	c.GetName()
	c = &Company{}
	c.GetName()
	c = nil
	c.GetName()
}

func TestCompany_GetNRR30(tt *testing.T) {
	var zeroValue int
	c := &Company{NRR30: &zeroValue}
	c.GetNRR30()
	c = &Company{}
	c.GetNRR30()
	c = nil
	c.GetNRR30()
}

func TestCompany_GetNRRTotal(tt *testing.T) {
	var zeroValue int
	c := &Company{NRRTotal: &zeroValue}
	c.GetNRRTotal()
	c = &Company{}
	c.GetNRRTotal()
	c = nil
	c.GetNRRTotal()
}

func TestCompany_GetPhase(tt *testing.T) {
	var zeroValue string
	c := &Company{Phase: &zeroValue}
	c.GetPhase()
	c = &Company{}
	c.GetPhase()
	c = nil
	c.GetPhase()
}

func TestCompany_GetPhaseSince(tt *testing.T) {
	var zeroValue time.Time
	c := &Company{PhaseSince: &zeroValue}
	c.GetPhaseSince()
	c = &Company{}
	c.GetPhaseSince()
	c = nil
	c.GetPhaseSince()
}

func TestCompany_GetProducts(tt *testing.T) {
	var zeroValue []string
	c := &Company{Products: &zeroValue}
	c.GetProducts()
	c = &Company{}
	c.GetProducts()
	c = nil
	c.GetProducts()
}

func TestCompany_GetRenewalDate(tt *testing.T) {
	var zeroValue time.Time
	c := &Company{RenewalDate: &zeroValue}
	c.GetRenewalDate()
	c = &Company{}
	c.GetRenewalDate()
	c = nil
	c.GetRenewalDate()
}

func TestCompany_GetRenewalDaysFromNow(tt *testing.T) {
	var zeroValue int
	c := &Company{RenewalDaysFromNow: &zeroValue}
	c.GetRenewalDaysFromNow()
	c = &Company{}
	c.GetRenewalDaysFromNow()
	c = nil
	c.GetRenewalDaysFromNow()
}

func TestCompany_GetStatus(tt *testing.T) {
	var zeroValue string
	c := &Company{Status: &zeroValue}
	c.GetStatus()
	c = &Company{}
	c.GetStatus()
	c = nil
	c.GetStatus()
}

func TestCompanyListOptions_GetLimit(tt *testing.T) {
	var zeroValue int
	c := &CompanyListOptions{Limit: &zeroValue}
	c.GetLimit()
	c = &CompanyListOptions{}
	c.GetLimit()
	c = nil
	c.GetLimit()
}

func TestCompanyListOptions_GetOffset(tt *testing.T) {
	var zeroValue int
	c := &CompanyListOptions{Offset: &zeroValue}
	c.GetOffset()
	c = &CompanyListOptions{}
	c.GetOffset()
	c = nil
	c.GetOffset()
}

func TestCompanyListOptions_GetSort(tt *testing.T) {
	var zeroValue string
	c := &CompanyListOptions{Sort: &zeroValue}
	c.GetSort()
	c = &CompanyListOptions{}
	c.GetSort()
	c = nil
	c.GetSort()
}

func TestLeanCompanyListOptions_GetExternalID(tt *testing.T) {
	var zeroValue string
	l := &LeanCompanyListOptions{ExternalID: &zeroValue}
	l.GetExternalID()
	l = &LeanCompanyListOptions{}
	l.GetExternalID()
	l = nil
	l.GetExternalID()
}

func TestLeanCompanyListOptions_GetSourceID(tt *testing.T) {
	var zeroValue string
	l := &LeanCompanyListOptions{SourceID: &zeroValue}
	l.GetSourceID()
	l = &LeanCompanyListOptions{}
	l.GetSourceID()
	l = nil
	l.GetSourceID()
}

func TestLeanCompanyListOptions_GetStatus(tt *testing.T) {
	var zeroValue string
	l := &LeanCompanyListOptions{Status: &zeroValue}
	l.GetStatus()
	l = &LeanCompanyListOptions{}
	l.GetStatus()
	l = nil
	l.GetStatus()
}

func TestUser_GetCompanyFilter(tt *testing.T) {
	var zeroValue string
	u := &User{CompanyFilter: &zeroValue}
	u.GetCompanyFilter()
	u = &User{}
	u.GetCompanyFilter()
	u = nil
	u.GetCompanyFilter()
}

func TestUser_GetCompressedView(tt *testing.T) {
	var zeroValue bool
	u := &User{CompressedView: &zeroValue}
	u.GetCompressedView()
	u = &User{}
	u.GetCompressedView()
	u = nil
	u.GetCompressedView()
}

func TestUser_GetCreateDate(tt *testing.T) {
	var zeroValue time.Time
	u := &User{CreateDate: &zeroValue}
	u.GetCreateDate()
	u = &User{}
	u.GetCreateDate()
	u = nil
	u.GetCreateDate()
}

func TestUser_GetDailyDigest(tt *testing.T) {
	var zeroValue bool
	u := &User{DailyDigest: &zeroValue}
	u.GetDailyDigest()
	u = &User{}
	u.GetDailyDigest()
	u = nil
	u.GetDailyDigest()
}

func TestUser_GetDefaultMeetingLength(tt *testing.T) {
	var zeroValue int
	u := &User{DefaultMeetingLength: &zeroValue}
	u.GetDefaultMeetingLength()
	u = &User{}
	u.GetDefaultMeetingLength()
	u = nil
	u.GetDefaultMeetingLength()
}

func TestUser_GetEmail(tt *testing.T) {
	var zeroValue string
	u := &User{Email: &zeroValue}
	u.GetEmail()
	u = &User{}
	u.GetEmail()
	u = nil
	u.GetEmail()
}

func TestUser_GetFirstName(tt *testing.T) {
	var zeroValue string
	u := &User{FirstName: &zeroValue}
	u.GetFirstName()
	u = &User{}
	u.GetFirstName()
	u = nil
	u.GetFirstName()
}

func TestUser_GetFollowerUpdate(tt *testing.T) {
	var zeroValue bool
	u := &User{FollowerUpdate: &zeroValue}
	u.GetFollowerUpdate()
	u = &User{}
	u.GetFollowerUpdate()
	u = nil
	u.GetFollowerUpdate()
}

func TestUser_GetID(tt *testing.T) {
	var zeroValue string
	u := &User{ID: &zeroValue}
	u.GetID()
	u = &User{}
	u.GetID()
	u = nil
	u.GetID()
}

func TestUser_GetInactive(tt *testing.T) {
	var zeroValue bool
	u := &User{Inactive: &zeroValue}
	u.GetInactive()
	u = &User{}
	u.GetInactive()
	u = nil
	u.GetInactive()
}

func TestUser_GetInAppNotifications(tt *testing.T) {
	var zeroValue bool
	u := &User{InAppNotifications: &zeroValue}
	u.GetInAppNotifications()
	u = &User{}
	u.GetInAppNotifications()
	u = nil
	u.GetInAppNotifications()
}

func TestUser_GetIsExposedAsSenderOption(tt *testing.T) {
	var zeroValue bool
	u := &User{IsExposedAsSenderOption: &zeroValue}
	u.GetIsExposedAsSenderOption()
	u = &User{}
	u.GetIsExposedAsSenderOption()
	u = nil
	u.GetIsExposedAsSenderOption()
}

func TestUser_GetIsHidden(tt *testing.T) {
	var zeroValue bool
	u := &User{IsHidden: &zeroValue}
	u.GetIsHidden()
	u = &User{}
	u.GetIsHidden()
	u = nil
	u.GetIsHidden()
}

func TestUser_GetLastName(tt *testing.T) {
	var zeroValue string
	u := &User{LastName: &zeroValue}
	u.GetLastName()
	u = &User{}
	u.GetLastName()
	u = nil
	u.GetLastName()
}

func TestUser_GetNickName(tt *testing.T) {
	var zeroValue string
	u := &User{NickName: &zeroValue}
	u.GetNickName()
	u = &User{}
	u.GetNickName()
	u = nil
	u.GetNickName()
}

func TestUser_GetPlayLogDisabled(tt *testing.T) {
	var zeroValue bool
	u := &User{PlayLogDisabled: &zeroValue}
	u.GetPlayLogDisabled()
	u = &User{}
	u.GetPlayLogDisabled()
	u = nil
	u.GetPlayLogDisabled()
}

func TestUser_GetRadarOneLine(tt *testing.T) {
	var zeroValue bool
	u := &User{RadarOneLine: &zeroValue}
	u.GetRadarOneLine()
	u = &User{}
	u.GetRadarOneLine()
	u = nil
	u.GetRadarOneLine()
}

func TestUser_GetRecentOpenPage(tt *testing.T) {
	var zeroValue string
	u := &User{RecentOpenPage: &zeroValue}
	u.GetRecentOpenPage()
	u = &User{}
	u.GetRecentOpenPage()
	u = nil
	u.GetRecentOpenPage()
}

func TestUser_GetRemoved(tt *testing.T) {
	var zeroValue bool
	u := &User{Removed: &zeroValue}
	u.GetRemoved()
	u = &User{}
	u.GetRemoved()
	u = nil
	u.GetRemoved()
}

func TestUser_GetRevReportPeriodType(tt *testing.T) {
	var zeroValue string
	u := &User{RevReportPeriodType: &zeroValue}
	u.GetRevReportPeriodType()
	u = &User{}
	u.GetRevReportPeriodType()
	u = nil
	u.GetRevReportPeriodType()
}

func TestUser_GetSegment(tt *testing.T) {
	var zeroValue string
	u := &User{Segment: &zeroValue}
	u.GetSegment()
	u = &User{}
	u.GetSegment()
	u = nil
	u.GetSegment()
}

func TestUser_GetSplitLayoutDisabled(tt *testing.T) {
	var zeroValue bool
	u := &User{SplitLayoutDisabled: &zeroValue}
	u.GetSplitLayoutDisabled()
	u = &User{}
	u.GetSplitLayoutDisabled()
	u = nil
	u.GetSplitLayoutDisabled()
}

func TestUser_GetTaskFilter(tt *testing.T) {
	var zeroValue string
	u := &User{TaskFilter: &zeroValue}
	u.GetTaskFilter()
	u = &User{}
	u.GetTaskFilter()
	u = nil
	u.GetTaskFilter()
}

func TestUser_GetV(tt *testing.T) {
	var zeroValue int
	u := &User{V: &zeroValue}
	u.GetV()
	u = &User{}
	u.GetV()
	u = nil
	u.GetV()
}

func TestUser_GetWorkflowFilter(tt *testing.T) {
	var zeroValue string
	u := &User{WorkflowFilter: &zeroValue}
	u.GetWorkflowFilter()
	u = &User{}
	u.GetWorkflowFilter()
	u = nil
	u.GetWorkflowFilter()
}
